name: Dependency Vulnerability Check

on:
  pull_request:
    paths:
      - '**/Gemfile.lock'       # Ruby dependencies
      - '**/package-lock.json'  # Node.js dependencies
      - '**/yarn.lock'           # Alternative for Node.js
      - '**/pnpm-lock.yaml'      # pnpm dependencies

jobs:
  vulnerability-check:
    runs-on: ubuntu-latest
    steps:
    
    # Checkout the code (needed for accessing files)
    - name: Checkout the code
      uses: actions/checkout@v3

    # Install Trivy
    - name: Install Trivy
      run: |
        curl -sfL https://github.com/aquasecurity/trivy/releases/download/v0.35.0/trivy_0.35.0_Linux-64bit.tar.gz | tar -xz -C /usr/local/bin

    # Fetch the base commit and head commit (including the main branch)
    - name: Fetch base and head commits
      run: |
        # Fetch the pull request branch and the main branch (default branch)
        git fetch origin main
        git fetch origin +refs/pull/${{ github.event.pull_request.number }}/merge
        BASE_COMMIT=$(git merge-base origin/main HEAD)
        HEAD_COMMIT=$(git rev-parse HEAD)
        echo "Base commit: $BASE_COMMIT"
        echo "Head commit: $HEAD_COMMIT"
        echo "BASE_COMMIT=$BASE_COMMIT" >> $GITHUB_ENV
        echo "HEAD_COMMIT=$HEAD_COMMIT" >> $GITHUB_ENV

    # Run Trivy on the base commit
    - name: Run Trivy on base commit
      id: trivy-base
      run: |
        git checkout $BASE_COMMIT
        # Run Trivy on the entire repo for base commit
        trivy fs --skip-update --quiet --severity HIGH,CRITICAL . > base_vulnerabilities.txt
        cat base_vulnerabilities.txt

    # Run Trivy on the head commit
    - name: Run Trivy on head commit
      id: trivy-head
      run: |
        git checkout $HEAD_COMMIT
        # Run Trivy on the entire repo for head commit
        trivy fs --skip-update --quiet --severity HIGH,CRITICAL . > head_vulnerabilities.txt
        cat head_vulnerabilities.txt

    # Compare vulnerabilities and output new vulnerabilities
    - name: Compare vulnerabilities and output new vulnerabilities
      run: |
        # Sort the output files to ensure consistent order
        sort base_vulnerabilities.txt > base_vulnerabilities_sorted.txt
        sort head_vulnerabilities.txt > head_vulnerabilities_sorted.txt

        # Find new vulnerabilities by comparing the sorted files
        NEW_VULNS=$(comm -13 <(cat base_vulnerabilities_sorted.txt) <(cat head_vulnerabilities_sorted.txt))

        # If there are new vulnerabilities, output them and fail the build
        if [ -n "$NEW_VULNS" ]; then
          echo "New vulnerabilities introduced:"
          echo "$NEW_VULNS"
          echo "New vulnerabilities were introduced, failing the build."
          exit 1
        else
          echo "No new vulnerabilities introduced."
        fi
